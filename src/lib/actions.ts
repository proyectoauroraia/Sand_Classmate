'use server';

import { generateEducationalMaterials } from '@/ai/flows/generate-educational-materials';
import type { GeneratedMaterials } from '@/lib/types';
import { z } from 'zod';
import PptxGenJS from 'pptxgenjs';
import { PDFDocument, rgb, StandardFonts, PageSizes } from 'pdf-lib';

const ActionInputSchema = z.object({
  syllabusFile: z.string().refine(
    (uri) => uri.startsWith('data:application/pdf;base64,'),
    {
      message: 'Invalid file type. Only PDF documents are supported.',
    }
  ),
});

async function createStyledPdf(title: string, content: string): Promise<string> {
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage(PageSizes.A4);
    const { width, height } = page.getSize();
    
    const helveticaBoldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
    const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);

    const primaryColor = rgb(0.1, 0.4, 0.7);
    const textColor = rgb(0.15, 0.15, 0.15);
    const grayColor = rgb(0.5, 0.5, 0.5);

    const margin = 50;
    let y = height - margin;

    // Header
    page.drawText('Generated by Sand Classmate', {
        x: margin,
        y: height - 30,
        font: helveticaFont,
        size: 9,
        color: grayColor,
    });
    y -= 40;

    // Title
    page.drawText(title, {
        x: margin,
        y: y,
        font: helveticaBoldFont,
        size: 24,
        color: primaryColor,
    });
    y -= 30;

    const lines = content.split('\n');

    for (const line of lines) {
        if (y < margin) {
            const newPage = pdfDoc.addPage(PageSizes.A4);
            y = newPage.getSize().height - margin;
        }

        const trimmedLine = line.trim();
        if (trimmedLine.startsWith('## ')) { // H2 Title
            page.drawText(trimmedLine.substring(3), { x: margin, y, font: helveticaBoldFont, size: 16, color: textColor });
            y -= 25;
        } else if (trimmedLine.startsWith('# ')) { // H1 Title
            page.drawText(trimmedLine.substring(2), { x: margin, y, font: helveticaBoldFont, size: 18, color: textColor });
            y -= 28;
        } else if (trimmedLine.startsWith('* ')) { // Bullet point
            page.drawText(`â€¢ ${trimmedLine.substring(2)}`, { x: margin + 15, y, font: helveticaFont, size: 11 });
            y -= 18;
        } else if (trimmedLine.length > 0) { // Paragraph
             page.drawText(trimmedLine, { x: margin, y, font: helveticaFont, size: 11, lineHeight: 15 });
             y -= 18;
        } else { // Empty line for spacing
            y -= 10;
        }
    }

    const pdfBytes = await pdfDoc.save();
    return Buffer.from(pdfBytes).toString('base64');
}


async function createStyledPptx(markdownContent: string): Promise<string> {
    const pres = new PptxGenJS();
    
    pres.layout = 'LAYOUT_16x9';

    // Define a master slide
    pres.defineSlideMaster({
        title: 'MASTER_SLIDE',
        background: { color: 'FFFFFF' },
        objects: [
            { 'rect': { x: 0, y: '90%', w: '100%', h: 0.5, fill: { color: '0077CC' } } },
            { 'text': {
                text: 'Sand Classmate',
                options: { x: 0, y: '92%', w: '100%', align: 'center', color: 'FFFFFF', fontSize: 12 }
            }}
        ],
    });

    const slidesContent = markdownContent.split('\n## ');

    // Title Slide
    const titleSlide = pres.addSlide({ masterName: 'MASTER_SLIDE' });
    const mainTitle = slidesContent.length > 0 ? slidesContent[0].replace(/^# /, '').split('\n')[0] : 'Presentation';
    titleSlide.addText(mainTitle, {
        x: 1, y: 1.5, w: 8, h: 1.5,
        fontSize: 44,
        bold: true,
        align: 'center',
        color: '363636'
    });
     titleSlide.addText('AI-Generated Course Materials', {
        x: 1, y: 3, w: 8, h: 1,
        fontSize: 24,
        align: 'center',
        color: '7F7F7F'
    });


    // Content slides
    slidesContent.slice(1).forEach((slideContent) => {
        const slide = pres.addSlide({ masterName: 'MASTER_SLIDE' });
        const [title, ...contentPoints] = slideContent.replace(/^## /, '').split('\n').filter(line => line.trim() !== '');

        slide.addText(title || '', {
            x: 0.5, y: 0.25, w: '90%', h: 0.75,
            fontSize: 28,
            bold: true,
            color: '0077CC',
        });
        
        const content = contentPoints.map(point => ({
            text: point.replace(/^\* /, '').trim(),
            options: {
                fontSize: 18,
                color: '404040',
            }
        }));

        if (content.length > 0) {
             slide.addText(content, {
                x: 0.5, y: 1.2, w: '90%', h: '75%',
                bullet: true,
             });
        }
    });

    const pptxBuffer = await pres.write('base64');
    return pptxBuffer as string;
}

export async function generateMaterialsAction(
  dataUri: string
): Promise<{ data: GeneratedMaterials | null; error: string | null }> {
  const validation = ActionInputSchema.safeParse({ syllabusFile: dataUri });
  if (!validation.success) {
    const error = validation.error.errors[0]?.message || 'Invalid data URI provided.';
    return { data: null, error };
  }
  
  try {
    const contentResult = await generateEducationalMaterials({
      syllabusFile: dataUri,
    });

    const [pptxBase64, workGuideBase64, exampleTestsBase64, interactiveReviewBase64] = await Promise.all([
        createStyledPptx(contentResult.powerpointPresentation),
        createStyledPdf('Work Guide', contentResult.workGuide),
        createStyledPdf('Example Tests', contentResult.exampleTests),
        createStyledPdf('Interactive Review', contentResult.interactiveReviewPdf),
    ]);

    const result: GeneratedMaterials = {
        powerpointPresentation: `data:application/vnd.openxmlformats-officedocument.presentationml.presentation;base64,${pptxBase64}`,
        workGuide: `data:application/pdf;base64,${workGuideBase64}`,
        exampleTests: `data:application/pdf;base64,${exampleTestsBase64}`,
        interactiveReviewPdf: `data:application/pdf;base64,${interactiveReviewBase64}`,
    };
    
    return { data: result, error: null };
  } catch (e) {
    console.error(e);
    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';
    return { data: null, error: `Failed to generate materials: ${errorMessage}` };
  }
}
